import React, { Component, useState } from "react";
import { Button, Divider, Dropdown, Form, Header, Input, TextArea } from 'semantic-ui-react';
import * as Utils from 'web3-utils';
import * as BlindSignature from 'blind-signatures';

function BallotSignedInfo(props) {
  const {voters, voterAccount} = props;
  const voter = voters.find(voter => voter.address === voterAccount.address);
  
  if (voter === undefined) {
    return (
      <div>
        <Header>
          This account is not registered in voting
        </Header>
      </div>
    )
  }
  else if (voter.signed === '') {
    return (
      <div>
        <Header>
          Waiting for Organizer to sign your Ballot
        </Header>
      </div>
    );
  }
  else {
    return (
      <div>
        <Header>
          Organizer has signed your Ballot
        </Header>
        Your voter address : {voter.address}
      </div>
    )
  }
}

function AccountsList(props) {
  const {accounts, selectedAccount, handleSelectedAccount} = props;
  const accountsList = accounts.map((account, index) => ({
    key: index,
    value: index,
    text: account.address
  }));

  return (
    <div>
      <Header>
        Select an account to cast vote from
      </Header>
      <Dropdown
        defaultValue={selectedAccount}
        fluid
        selection
        options={accountsList}
        onChange={(e, {value}) => handleSelectedAccount(value)}
      />
    </div>
  )
}

function CastVote(props) {
  const {handleCastVote} = props;
  const [voteString, setVoteString] = useState('');
  const [randomValue, setRandomValue] = useState('');

  return (
    <div>
      <br />
      <Input
        fluid
        placeholder='Vote string...'
        onChange={(e) => setVoteString(e.target.value)}
      />
      <br />
      <Form>
        <TextArea
          placeholder='Random value...'
          onChange={(e) => setRandomValue(e.target.value)}
        />
      </Form>
      <br />
      <br />
      <Button primary disabled={voteString === '' || randomValue === ''} onClick={() => handleCastVote(voteString, randomValue)}>
        Cast Vote!
      </Button>
    </div>
  );
}

class VoteCastingVoter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      votingContract: {
        voters: [
          {
            address: '0xAddress001',
            name: 'Name1',
            blinded: '8117975862917616535203718728602315406509229351456348863271583252693908129483894965413868668676582835024120203152406206179841103968205373673241202022023197496725021324889571998404014951244114098103107790113395999189612989068524272417870062707450998159226390751618499722331935458700129309014810606210676933652613780685600951963700650668849019598714971483131432996646634688172167561959590162519354828149722613644783322013894821101150557745067989547015710335006054311416838393323067656249323161325255888883913547391059590768886852737976929010488680748670195765386680031867083255345599718567594455436661909201209858908355',
            signed: '8180767865253100348357408387782497295059120671132424365666555363594365053000919566987361451348710725719885220362185477324629174527874452765007751665182636672017982343229753296380781061384263912936928000002654902150148272990615942424239145191416267808958287722337600831874852212924967126530016215966845216646297789690675179735828123603788215955356920988050747932733565567248776232557218663306564462330002908283291368148361465270405529504195802994562468151240985375508509739024931310436524870583343831318484364810644449720931491101402150433106173353030522671503379391011234540984202195170459448630549147495202527523729',
            organizerSignerId: '1'
          },
          {
            address: '0xAddress002',
            blinded: '10145883455508304424376424789191660177315674526812815344053896875467701943870049050198462341215442736284733159621596280275966379824261730345568090959268140246254212876140034182979756583077964289309009779033823331031845719048340274516829951037813099583208580780385473043878516244314605222536072448873716968483927443789661315980833622256602277611028407238365549625359621826826933145925779453356022179552570083166303910667013198081630015311018667885424046975945423612077135934759835287549552850534891657683046690291104064446167139947179609447876344069634656814275426941572011333996105011405910002872512432552199258003214',
            signed: '1114901750568887734519072023383500372970961931317065897951517660057989643103850707002177859326652174943987879915716803970730073580675680892827147780657977045703918374699406946374358535659101030353792328966718442953208792160849023906491741833872500727365536965498098226535156217805267384048409968232386459565910893037135877808737168750428275219045274400658882718104328704552547066554677108323036582893194814286754953259919326055318692752348901274537055134912887881470160332118220339993782535103928235957200178299375764913913262313940853864502061151486777137729010528710925382387709916283455535603944042219186969943244',
            organizerSignerId: '3'
          },
          {
            address: '0xAddress003',
            blinded: '11566375081294495229943018748317249171524310348424102372045812540827225743880827655800744612142007996363781763425792158425432455493721507141481080833685436314855974699982536568749609148665875852751472573093842683593376841514690810725583447827118771687989532854299863534349039781995267892280446654686987700403956647210332388726824438451223879910056604353969933299166877978714507766619224610767500792995046076342069048708104182536649101871081752714243629376742462682798493758247265147824169098740648907485362029264225041674195799954030558623267775385804790748826147870353283412595193346570818291891767430701734068908954',
            signed: '16935251572065563892632935300392370458184367898757197060518165833751391959749993775840051994757667329534004407901133094936276881037121417075301557874159876783547973484453093036737894446864728958569778472987238553634514606207049180983836909700337398595462707989530893196872311326725877002437525553360523627120326365893892610258676122291035988901402460115413954352237802240678705895731579393707184184943800854480844591616301655783425901965345660935122397734373502121696313174394788968596264704351207229708720024478144508297028563990725225012449905898882943166429142795120671816583118160122553573649112995714247324966171',
            organizerSignerId: '3'
          },
          {
            address: '0xAddress004',
            blinded: '15345650910784553321802597487532095762724997020844627583267996710596877945366069797006677671676247774087624267248279737426455487214846188495725810305392153427594821459183118972284817536193240576667181882312402810626737378769731707125853885654822334419770975422871603413027263271237385565197149192624748952680441395657387165979658331374202169859717741971530037007081745806982061619608086729712533672886176987234424929347941984590068404546069697645984588988081495276981495353081166899195665261153710774737552259560291408550129569768107041389907815432101705535764721123185873189049230443177713828477096848767328375483698',
            signed: '8073804088774219268710373721048194335704560687830092044110513543576412867789922053963151759044017156465519274266006361574015487740071721473691553585557377525482800923810475090099949098672475844426391376532816047450727945087987061789623429765396583546513579654204834070892661575880186441838399366478021491398402434731978714394655017668935434057870395479676902083257093062095156721790800794295602046914759674242557911071542083370976001293233076135998403871235574836333906008024633136144386751384417900651110170041241523544736084280445491705994704324340204484236399115063534584348997811535510841206248482275829522452878',
            organizerSignerId: '2'
          },
          {
            address: '0xAddress005',
            blinded: '10245731460611582307838834390266903472478162720955258633103960305602638609376006879342085494433040990367910141488134080575291156567979142576700991497929961498643834727252717271647750372131796139014590230797179027484813733800377483828086187431779157915943459788655535467224612377174372258832378204491434729966314663619011131335090277663608234939821993702516656829965192569901779373182656781521202411844965413858816404959092107406459252381866253356019944767045537178278676142294478449992308803809837776259659417582153238100456936995263388497735512394880176566466535050858605989408787222967285771891396603165442661998539',
            signed: '16572039929905464990432335887978555309848257273898599383745571405273230653710959635639894274969416443926045543599140215081517636343394131827607498881751575836384411222978690415325852636904424263213577154901244134318517719145178123907785031168260284138828782862955999100245806840621929705803435699409402399853794477505623649568338936348444834148415541738567814252236869030128832373609442550649734291346718929423450060299181803873170193761001301379444017242234647083834130657220275349531385728885799473184100518282845759530519618329292807640976640531455392546285850677315656141353403356875141990950375626225859569864471',
            organizerSignerId: '2'
          },
          {
            address: '0xAddress006',
            blinded: '10370840196842416147582479290891520121971831713945853808453356195745034902107150006224851613151070424918498953145962791905405146307715063280502820601604040927048676413610960819050331746330781286208202826378856868155503644643285785502893984601470886021894554385483556595929659317057138747420878166263584879369112804821174339467889087112652581289143598725126610936576398122286105805318524017845217360919570773111738366125776310781886050781295742263211492290712020769502327220680213484663572618118202668634218632887480476301471187980386009444613942780284437565687294696640136082452739516498442237873822421368276711739444',
            signed: '17332328332241257653489596534052941733371958982788236647412966509110884988598806724915762248368761174575763217323444062900100469272268204588370106468611659398630951069444849060550889234266764341303297470742232290173524016376563176210447899916441935951482417748230036713377026102142899528047334700996967359686046424605126507630953405053153477698980930715496758578374940364766516944868947724275992745008014021261947788597034327862555542316168285070000704626341311421489949639003119781723976277117859820619919628810859789075452335712913414373774561568912551712149288566585259875751746300433201965797217965610367431903770',
            organizerSignerId: '1'
          },
          {
            address: '0xAddress007',
            blinded: '12892477465193237015436448410101168217188413629704576128729749561616579976398137107780106409048143158044343144203439849633903864171943542679014063728283865777983811268989725919673343668842780397038657616587090454560759848020558706266487204491736718684342695081929526729799070165929831956084015653023870709163647977654315329030934597206300314698274585425898016687841017431235389001829271968280870039349908518385358278540338885086541056365149447623323389921625596558408372580076360903327086386941404179716176992495360430636743121134771959053160792882770065284697939753750060911349301386782796763070099442574018281444134',
            signed: '15731228559197428525140147449755451917654963901820314958920846257057814112504322657887553122685731798321879206912565983832382141648797353731081308403907880494807587398505911412447175259227625639869225263489045825431178081449245548404118928277616721728719760785348370024902161744420218378565463163684326105921498122044299184398256361835734219879014768053036017396249055690394829849132632962072892993444682809962401060107592176307589036115226394599896032598722659699101841283719815514790954974304132325019079396184756848905416451928940117663755273790088492509371952162180072943704895543507167224554808075091392847626367',
            organizerSignerId: '4'
          }
        ],
        organizers: [ // Organizer account
          {
            id: '1',
            address: '0xAddressOrg001',
            name: 'Org1',
            blindSigKey: { // RSA keypair
              N: '29966692371364866625346898353663834134938385542002417037721577477302102136522085939472165345604159090008369291967229214089843550402783764345171829774118370421727069328975236719404868237298550523989366936116144150572205603225580613276301181810980227503747111091217434069794434110873713548193276565135873156551776781744977506384102252699464204349946745613824014413457618301726927010747822355674379832350188825717228418277968661184894099448068813151646552494933847934355517511397146924721973857101644904751900691439081133481472498369847582949341542277140564618444421223545987899994237990578140719418027385682765400810787',
              E: '65537'
            }
          },
          {
            id: '2',
            address: '0xAddressOrg002',
            name: 'Org2',
            blindSigKey: {
              N: '26458970144176529231278251478923876274581682945160630211923288556492285074551812817562954732957996890856225708775063710963505080257659492810452589951505161037289950403780584424848427034382647213927966088689259773969220432507351297342517879366775210437071365276681805376039406952355809450845271748916810754673242718443536347275958685398465694101786361797986578701119612608844428824062586235437039817380062355856918189315480847660878662520951404772466376423110443487482138333887388449385867806705579043254110057834686860727136742974754338482731437361733622421487674030607511342064989032215407906503194121394165185383797',
              E: '65537'
            }
          },
          {
            id: '3',
            address: '0xAddressOrg003',
            name: 'Org3',
            blindSigKey: {
              N: '22174933060533612279001839757293277558447636625990692079946257223347032594943597488661968989040186738935132503446965285010055923873177882577484769463195499109178479501165613614043668876610322147551149096608999387482124244500100367766728152174625193206582596173771525689770346002747421347904671941536291573608005763407437768868993893358554277826661660885093146948296152543868273304544471129280791068975551329074059044323118982282750362281455605896422650475741100638391510715626109674650392999767613861555822958045214362249243277613528444450124436766949894713659037566339120415451310965138637574175225632109970533494113',
              E: '65537'
            }
          },
          {
            id: '4',
            address: '0xAddressOrg004',
            name: 'Org4',
            blindSigKey: {
              N: '16775050148364882245462320022645711979084082808337620100786492237178276323524241257195211673938644093147897800612374614522663611735101343119890322873849442378422327932652134334846956087038755944911232948970295492128892561484459845274903194935038106971311360097576103899315925905098692697717803827791144026274296101244412223223470049083265942846444612408948173048910727508457418654464393545886905333474218934459199740388726253551580709423439681120085669619756873014277697219857743030398799514005464917922078134642831348625190313140985084331196622556515915406432281755384503209496762260136702417829129242855897174049259',
              E: '65537'
            }
          }
        ]
      },
      accounts: [
        {
          address: '0xAddress001'
        },
        {
          address: '0xAddress002'
        },
        {
          address: '0xAddress003'
        },
        {
          address: '0xAddress004'
        },
        {
          address: '0xAddress005'
        },
        {
          address: '0xAddress006'
        },
        {
          address: '0xAddress007'
        },
        {
          address: '0xAddress101'
        },
        {
          address: '0xAddress102'
        },
        {
          address: '0xAddress103'
        },
        {
          address: '0xAddress104'
        },
        {
          address: '0xAddress105'
        },
        {
          address: '0xAddress106'
        },
        {
          address: '0xAddress107'
        }
      ],
      voterAccount: 0, // Selected wallet account
      selectedAccount: 0 // Another account to be cast vote anonymously
    }
  }

  getCurrentVoterAccount = () => {
    return this.state.accounts[this.state.voterAccount];
  }

  handleSelectedAccount = (selectedAccount) => {
    this.setState({
      selectedAccount: selectedAccount
    })
  }

  getUnblindedVote = (voter, randomValue) => {
    const organizerSigner = this.state.votingContract.organizers.find(organizer => organizer.id === voter.organizerSignerId);
    const unblinded = BlindSignature.unblind({
      signed: voter.signed,
      N: organizerSigner.blindSigKey.N,
      r: randomValue
    });
    console.log("Unblinded vote : " + unblinded);
    return unblinded;
  }

  handleCastVote = (voteString, randomValue) => {
    const voter = this.state.votingContract.voters.find(voter => voter.address === this.state.accounts[this.state.voterAccount].address);
    const unblinded = this.getUnblindedVote(voter, randomValue);

    // Verify if signature is correct before casting vote
    const organizerSigner = this.state.votingContract.organizers.find(organizer => organizer.id === voter.organizerSignerId);
    const isSignatureCorrect = BlindSignature.verify({
      unblinded: unblinded,
      N: organizerSigner.blindSigKey.N,
      E: organizerSigner.blindSigKey.E,
      message: Utils.soliditySha3(voteString)
    });
    console.log("Is Signature Correct : " + isSignatureCorrect);

    if (isSignatureCorrect) {
      // Send cast vote to VotingContract
      // IMPORTANT : Send using selectedAccount(anonymous), not voterAccount(registered)
      const message = {
        voteString: voteString,
        unblinded: unblinded.toString(),
        organizerId: voter.organizerSignerId
      }
      console.log("Send : " + JSON.stringify(message));
    }
    else {
      // Handle signature error
      console.log("Please contact the organizer");
    }
  }

  render() {
    return (
      <div>
        <BallotSignedInfo voters={this.state.votingContract.voters} voterAccount={this.getCurrentVoterAccount()} />
        <Divider />
        <AccountsList accounts={this.state.accounts} selectedAccount={this.state.selectedAccount} handleSelectedAccount={this.handleSelectedAccount} />
        <CastVote handleCastVote={this.handleCastVote} />
      </div>
    );
  }
}

export default VoteCastingVoter;